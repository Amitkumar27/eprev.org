<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Anton Eprev</title>
  <link href="http://eprev.org/atom.xml" rel="self" />
  <link href="http://eprev.org/" />
  <updated>2017-01-29T17:35:44+01:00</updated>
  <id>http://eprev.org/</id>
  <author>
    <name>Anton Eprev</name>
    <email>a.eprev@gmail.com</email>
  </author>
  
    <entry>
      <title>How to detect if CSS transforms are supported on SVG</title>
      <link href="http://eprev.org/2017/01/05/how-to-detect-if-css-transforms-are-supported-on-svg/"/>
      <updated>2017-01-05T00:00:00+01:00</updated>
      <id>http://eprev.org/2017/01/05/how-to-detect-if-css-transforms-are-supported-on-svg</id>
      <content type="html">&lt;p&gt;If you’re reading this, then apparently you already know that &lt;a href=&quot;https://developer.microsoft.com/en-us/microsoft-edge/platform/status/supportcsstransformsonsvg/&quot;&gt;IE and Edge don’t support CSS transformations
on SVG&lt;/a&gt;
and neither apply CSS transitions. Moreover, SVG animations might not be an option, since &lt;a href=&quot;https://groups.google.com/a/chromium.org/forum/#!topic/blink-dev/5o0yiO440LM%5B1-25%5D&quot;&gt;Chrome
deprecated SMIL&lt;/a&gt;
in favor of CSS animations. How come? Probably you’re thinking now of using CSS when it’s available
and falling back to SVG &lt;code&gt;transform&lt;/code&gt; attribute.&lt;/p&gt;

&lt;p&gt;So how to check whether or not the browser supports CSS transforms on SVG elements? I came up with
the following approach:&lt;/p&gt;

&lt;figure&gt;&lt;pre&gt;&lt;code&gt;const supportsCSSTransformsOnSVG = (() =&amp;gt; {
  const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
  svg.setAttribute('viewBox', '0 0 2 2');
  Object.assign(svg.style, {
    position: 'absolute',
    top: 0,
    left: 0,
    width: '2px',
    height: '2px',
  });
  svg.innerHTML = '&amp;lt;rect width=&quot;1&quot; height=&quot;1&quot; style=&quot;transform: translate(1px, 1px)&quot;/&amp;gt;';
  document.body.appendChild(svg);
  const result = document.elementFromPoint(1, 1) !== svg;
  svg.parentNode.removeChild(svg);
  return result;
})();&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Which can be used later on:&lt;/p&gt;

&lt;figure&gt;&lt;pre&gt;&lt;code&gt;if (supportsCSSTransformsOnSVG) {
  el.style.transform = `translate(${dx}px, ${dy}px)`;
} else {
  el.setAttribute('transform', `translate(${dx} ${dy})`);
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</content>
    </entry>
  
    <entry>
      <title>The importance of HTML character encoding</title>
      <link href="http://eprev.org/2017/01/04/the-importance-of-html-character-encoding/"/>
      <updated>2017-01-04T00:00:00+01:00</updated>
      <id>http://eprev.org/2017/01/04/the-importance-of-html-character-encoding</id>
      <content type="html">&lt;p&gt;W3C/WHATWG HTML5 specification states:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A character encoding declaration is required (…) even when all characters are in the ASCII range,
because a character encoding is needed to process non-ASCII characters entered by the user in forms,
in URLs generated by scripts, and so forth.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When the character encoding is not specified, the browser is left to determine the encoding &lt;strong&gt;before
parsing&lt;/strong&gt; the document. The user agent will search for character encoding declarations &lt;a href=&quot;https://html.spec.whatwg.org/multipage/semantics.html#charset1024&quot;&gt;in the first
1024 bytes&lt;/a&gt;. Therefore, if you don’t
set the encoding of the document neither in the &lt;code&gt;Content-Type&lt;/code&gt; header nor using the &lt;code&gt;META&lt;/code&gt; tag, the browser
will have to wait for the first 1024 bytes and only then may attempt to auto-detect the character encoding
or fallback to the user-specified default character encoding.&lt;/p&gt;

&lt;p&gt;It’s important to specify a character set of the document as earlier as possible, otherwise the user agent
will “idle” before it actually can start parsing HTML and loading other important resources (styles and scripts).
This negatively impacts the page load time, especially on a slow connection or when the server flushes
the early-head. The later can be completely meaningless when it’s under 1024 bytes and the character encoding
of the document is not indicated.&lt;/p&gt;

&lt;p&gt;To demonstrate this I made a &lt;a href=&quot;https://gist.github.com/eprev/322cd355319483aaaebbb2da35052281&quot;&gt;simple HTTP server&lt;/a&gt;
which flushes early-head of the document immediately and waits for a second before sending the rest of it.
The early-head contains a &lt;code&gt;script&lt;/code&gt; tag with the &lt;code&gt;async&lt;/code&gt; attribute and a &lt;code&gt;link&lt;/code&gt; tag to the external stylesheet.&lt;/p&gt;

&lt;figure&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;script src=&quot;…&quot; async
  onload=&quot;console.log({scripts: performance.now()})&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;link href=&quot;…&quot; rel=&quot;stylesheet&quot;
  onload=&quot;console.log({styles: performance.now()})&quot;&amp;gt;
&amp;lt;script&amp;gt;
  document.addEventListener(
    'DOMContentLoaded',
    () =&amp;gt; console.log({DOMContentLoaded: performance.now()})
  );
&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;figcaption&gt;Part of the early-head contents.&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;If the character encoding is specified, then the browser (Firefox in this particular case) begins parsing HTML
immediately along with loading external resources. On the image below, you can see that the script and
the stylesheet have been loaded before DOM becomes interactive.&lt;/p&gt;

&lt;figure&gt;&lt;div&gt;&lt;img src=&quot;/images/posts/ff-charset-is-specified.png&quot; alt=&quot;Firefox Web Console: Character encoding is specified&quot;&gt;&lt;/div&gt;
&lt;figcaption&gt;When the character encoding is specified, Firefox starts loading styles and scripts as it is parsing the HTML.&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;When the character encoding is not specified, then the browser starts parsing HTML only after it gets
the rest of the document (the first 1024 bytes), causing a delay in loading scripts and stylesheets.&lt;/p&gt;

&lt;figure&gt;&lt;div&gt;&lt;img src=&quot;/images/posts/ff-charset-is-not-specified.png&quot; alt=&quot;Firefox Web Console: Character encoding is not specified&quot;&gt;&lt;/div&gt;
&lt;figcaption&gt;When the character encoding is not specified, Firefox waits for the first 1024 bytes before it begins loading styles and scripts.&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;Safari shares similar to Firefox behavior. Things are quite different with Chrome and Edge, they begin parsing HTML
right away even if the character encoding is not specified or incorrect.&lt;/p&gt;

&lt;figure&gt;&lt;div&gt;&lt;img src=&quot;/images/posts/chrome-charset-is-not-specified.png&quot; alt=&quot;Chrome Console: Character encoding is not specified&quot;&gt;&lt;/div&gt;
&lt;figcaption&gt;Chrome starts parsing the HTML and loading styles and scripts as it is loading the document even if the character encoding is not specified.&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;What’s incorrect encoding? HTML5 specification says that user agents must not support the CESU-8, UTF-7,
BOCU-1, SCSU, EBCDIC and UTF-32 encodings. For that reason, Firefox and Safari won’t parse
the document UTF-7 encoded until they get the first 1024 bytes.&lt;/p&gt;

&lt;p&gt;On a final note, it’s important that the character set specified in the &lt;code&gt;Content-Type&lt;/code&gt; header or &lt;code&gt;META&lt;/code&gt; tag
matches the encoding actually used for the document. If the browser detects an incorrect or mismatched encoding,
it can re-parse the document with the real encoding resulting in additional delays.&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>What’s worth watching</title>
      <link href="http://eprev.org/2016/08/03/whats-worth-watching/"/>
      <updated>2016-08-03T00:00:00+02:00</updated>
      <id>http://eprev.org/2016/08/03/whats-worth-watching</id>
      <content type="html">&lt;ul&gt;
  &lt;li&gt;Alexander Bruce on “&lt;a href=&quot;http://www.gdcvault.com/play/1020776/&quot;&gt;An Overnight Success, Seven Years in the Making&lt;/a&gt;” (2014): a story of creating an (successful) indie game, which shows how high the cost of success can be (financially and psychologically).&lt;/li&gt;
  &lt;li&gt;Jeffrey Dean (Google) on “&lt;a href=&quot;https://youtu.be/modXC5IWTJI&quot;&gt;Building Software Systems At Google and Lessons Learned&lt;/a&gt;” (2010): interesting talk on how their technology had evolved over time.&lt;/li&gt;
  &lt;li&gt;Mathias Bynens (Opera) on “&lt;a href=&quot;https://vimeo.com/163113209&quot;&gt;Front-End Performance: The Dark Side&lt;/a&gt;” (2016): performance-related APIs can have a negative security impact, making some timing attacks possible on the web.&lt;/li&gt;
  &lt;li&gt;Mark Ferrari (Terrible Toybox) on “&lt;a href=&quot;http://gdcvault.com/play/1023586/8-Bit-8-Bitish-Graphics&quot;&gt;8 Bit &amp;amp; ‘8 Bitish’ Graphics-Outside the Box&lt;/a&gt;” (2016): how 8 bit graphics are being made nowadays and back then, using of pallet shifting to create complex animation effects.&lt;/li&gt;
&lt;/ul&gt;
</content>
    </entry>
  
    <entry>
      <title>What’s worth watching</title>
      <link href="http://eprev.org/2016/07/23/whats-worth-watching/"/>
      <updated>2016-07-23T00:00:00+02:00</updated>
      <id>http://eprev.org/2016/07/23/whats-worth-watching</id>
      <content type="html">&lt;ul&gt;
  &lt;li&gt;Ben Maurer (Facebook) on “&lt;a href=&quot;https://youtu.be/MlNGomWegCE&quot;&gt;Web speed @ Facebook&lt;/a&gt;” (2016): shipping the page incrementally,
packaging resources based on their usage patterns, early flushing, deferred dependencies, performance measurements,
JavaScript’s lazy parsing.&lt;/li&gt;
  &lt;li&gt;Matthew Flaming (New Relic) on “&lt;a href=&quot;https://youtu.be/SH8nNANNQ98&quot;&gt;Building a system that never stops&lt;/a&gt;” (2016):
what challenges come with the scaling systems?&lt;/li&gt;
  &lt;li&gt;Pual Lewis (Google) on “&lt;a href=&quot;https://youtu.be/thNyy5eYfbc&quot;&gt;High performance web user interfaces&lt;/a&gt;” (2016):
applying RAIL (Response-Animation-Idle-Load) principles in practice.&lt;/li&gt;
  &lt;li&gt;Scott Jenson (Google) on “&lt;a href=&quot;https://youtu.be/7H_E_ZbFAn0&quot;&gt;The Physical Web is a Speed Issue&lt;/a&gt;” (2015):
there is no need to have a gazillion of apps installed on your smartphone in order to interact with things around you.&lt;/li&gt;
  &lt;li&gt;Guy Podjarny (Snyk) &amp;amp; Assaf Hefet (Snyk)
on “&lt;a href=&quot;https://youtu.be/iXA14OFXxZA&quot;&gt;Tracking Vulnerabilities in Your Third Party Code&lt;/a&gt;” (2015): these guys built a tool
that helps you track and fix vulnerabilities in your Node.js application dependencies.&lt;/li&gt;
&lt;/ul&gt;
</content>
    </entry>
  
    <entry>
      <title>What’s worth watching</title>
      <link href="http://eprev.org/2016/01/26/whats-worth-watching/"/>
      <updated>2016-01-26T00:00:00+01:00</updated>
      <id>http://eprev.org/2016/01/26/whats-worth-watching</id>
      <content type="html">&lt;ul&gt;
  &lt;li&gt;Yunong Xiao (Netflix) on “&lt;a href=&quot;https://youtu.be/O1YP8QP9gLA&quot;&gt;Debugging Node.js in Production&lt;/a&gt;” (2015): what Netflix uses in production to diagnose and fix performance issues, bugs and memory leaks in Node.js applications.&lt;/li&gt;
  &lt;li&gt;Dan Abramov on “&lt;a href=&quot;https://youtu.be/xsSnOQynTHs&quot;&gt;Live React: Hot Reloading with Time Travel&lt;/a&gt;” (2015): a story about Redux.&lt;/li&gt;
  &lt;li&gt;“&lt;a href=&quot;https://youtu.be/ttavBa4giPc&quot;&gt;Google I/O 2011: The Secrets of Google Pac-Man: A Game Show&lt;/a&gt;” (2011): the entertaining story behind Google Pac-Man doodle.&lt;/li&gt;
  &lt;li&gt;Ernie Miller on “&lt;a href=&quot;https://youtu.be/7MeBuDLbF98&quot;&gt;How to Build a Skyscraper&lt;/a&gt;” (2015): what we can learn from skyscraper-building experience.&lt;/li&gt;
  &lt;li&gt;Mathias Bynens (Opera) on “&lt;a href=&quot;https://youtu.be/0Bj4etSa84c&quot;&gt;RegExp.prototype.unicode&lt;/a&gt;” (2015): what Unicode-related problems are in JavaScript regular expressions and how ES6 helps solve these issues.&lt;/li&gt;
&lt;/ul&gt;
</content>
    </entry>
  
    <entry>
      <title>What’s worth watching</title>
      <link href="http://eprev.org/2016/01/15/whats-worth-watching/"/>
      <updated>2016-01-15T00:00:00+01:00</updated>
      <id>http://eprev.org/2016/01/15/whats-worth-watching</id>
      <content type="html">&lt;ul&gt;
  &lt;li&gt;Lee Byron (Facebook) on “&lt;a href=&quot;http://youtu.be/WQLzZf34FJ8&quot;&gt;Exploring GraphQL&lt;/a&gt;” (2015): a data fetching language
that is widely used at Facebook.&lt;/li&gt;
  &lt;li&gt;Interesting session on “&lt;a href=&quot;http://youtu.be/OcFOWIq3cIc&quot;&gt;Making Robots&lt;/a&gt;” at &lt;a href=&quot;http://www.fab11.org&quot;&gt;Fab11 conference&lt;/a&gt;:
MIT, Harvard, DARPA, Boston Dynamics and Kiva Systems.&lt;/li&gt;
  &lt;li&gt;Rachel Potvin (Google) on “&lt;a href=&quot;http://youtu.be/W71BTkUbdqE&quot;&gt;Why Google Stores Billions of Lines of Code in a Single Repository&lt;/a&gt;” (2015):
advantages and trade-offs of having a giant single monolithic source repository.&lt;/li&gt;
  &lt;li&gt;Christian Johansen on “&lt;a href=&quot;http://youtu.be/wA98Coal4jk&quot;&gt;Immutable JavaScript: You can’t change this&lt;/a&gt;” (2015):
Immutability in React.&lt;/li&gt;
  &lt;li&gt;Lea Verou on making CSS pie charts in “&lt;a href=&quot;http://youtu.be/s4HdeJctq-A&quot;&gt;The Missing Slice&lt;/a&gt;” (2015).&lt;/li&gt;
&lt;/ul&gt;
</content>
    </entry>
  
    <entry>
      <title>Change OS X network location based on the Wi-Fi network name</title>
      <link href="http://eprev.org/2015/08/06/change-os-x-network-location-based-on-the-wi-fi-network-name/"/>
      <updated>2015-08-06T00:00:00+02:00</updated>
      <id>http://eprev.org/2015/08/06/change-os-x-network-location-based-on-the-wi-fi-network-name</id>
      <content type="html">&lt;p&gt;You might have heard about &lt;a href=&quot;https://support.apple.com/en-us/HT202480&quot;&gt;Network locations&lt;/a&gt; in OS X.
It allows you to have different network configurations and quickly switch between them. For instance,
if you have to use a corporate proxy server at work and you don’t need it when you get back home,
you can create a new location named “Work” (with any necessary network proxy settings) and keep
the default “Automatic” location for home. But still, you would need to switch between those locations
manually. How annoying!&lt;/p&gt;

&lt;p&gt;Wouldn’t it be great if OS X could switch location automatically based on the name of Wi-Fi network
that I’m connected to? Moreover, I would like to change automatically some Security Preferences,
because I have to lock the computer immediately at work when I go away. But I found it annoying
to have it at home.&lt;/p&gt;

&lt;p&gt;So, how to change automatically OS X’s network location based on the name of Wi-Fi network or run
arbitrary scrips when it happens? Pretty easy! We will be following a convention over configuration
paradigm to reduce the overall complexity.&lt;/p&gt;

&lt;p&gt;First of all, we have to name locations after Wi-Fi network names. For instance, if the name of
your corporate wireless network is “Corp Wi-Fi”, you have to create a new location “Corp Wi-Fi”.
If you connect to a wireless network that you don’t have a specific location for, then
the default location “Automatic” will be used.&lt;/p&gt;

&lt;p&gt;Then, we need to install &lt;a href=&quot;https://github.com/eprev/locationchanger&quot;&gt;&lt;code&gt;locationchanger&lt;/code&gt;&lt;/a&gt;. It‘s a tool
that watches for wireless network changes and responds accordingly. Its installation process
is extremely easy:&lt;/p&gt;

&lt;figure&gt;&lt;pre&gt;&lt;code&gt;$ curl -L https://github.com/eprev/locationchanger/raw/master/locationchanger.sh | bash&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It will ask only for a root password to install &lt;code&gt;locationchanger&lt;/code&gt; service. Now, every time you connect to
a wireless network it will change the location to either the corresponding or the default one.&lt;/p&gt;

&lt;p&gt;That’s not all. We still want to change Security Preferences automatically when the location
has been changed. Let’s create scripts that will be executed every time it happens. One is
for “Corp Wi-Fi” location:&lt;/p&gt;

&lt;figure&gt;&lt;pre&gt;&lt;code&gt;#!/usr/bin/env bash

# Require password immediately after sleep or screen saver
osascript -e 'tell application &quot;System Events&quot; to set require password to wake of security preferences to true'&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Another is for the default location:&lt;/p&gt;

&lt;figure&gt;&lt;pre&gt;&lt;code&gt;#!/usr/bin/env bash

# Don’t require password after sleep or screen saver
osascript -e 'tell application &quot;System Events&quot; to set require password to wake of security preferences to false'&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Save them as &lt;code&gt;~/.locations/Corp Wi-Fi&lt;/code&gt; and &lt;code&gt;~/.locations/Automatic&lt;/code&gt; respectively. Voilà!
You’re not limited by changing only the security preferences, you can do whatever
you want to…&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>Converting PNG to SVG</title>
      <link href="http://eprev.org/2015/05/27/converting-png-to-svg/"/>
      <updated>2015-05-27T00:00:00+02:00</updated>
      <id>http://eprev.org/2015/05/27/converting-png-to-svg</id>
      <content type="html">&lt;p&gt;Let’s say, you’ve found a funny black-and-white picture on the Internet and you want it badly in hi-res or vector which is even better. Well, there is a command-line tool called &lt;a href=&quot;http://potrace.sourceforge.net&quot;&gt;Potrace&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;It has precompiled distributions for OS X, Linux and Windows. Potrace is also available in major package managers, including &lt;a href=&quot;http://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt;

&lt;figure&gt;&lt;pre&gt;&lt;code&gt;$ brew install potrace&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The manual installation is super easy though. For OS X do the following:&lt;/p&gt;

&lt;figure&gt;&lt;pre&gt;&lt;code&gt;$ cd potrace-1.12.mac-i386
$ sudo cp mkbitmap.1 potrace.1 /usr/share/man/
$ sudo cp mkbitmap potrace /usr/local/bin&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;

&lt;p&gt;Potrace works with bitmaps (PBM, PGM, PPM, or BMP format). It means you have to convert the image you have to one of those formats. We will be using &lt;a href=&quot;http://www.imagemagick.org&quot;&gt;ImageMagick&lt;/a&gt;’s &lt;code&gt;convert&lt;/code&gt; program. If you don’t have it installed, you can use Homebrew to get it:&lt;/p&gt;

&lt;figure&gt;&lt;pre&gt;&lt;code&gt;$ brew install imagemagick&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Alright. Let’s say you’ve got this image (by &lt;a href=&quot;http://nationofamanda-blog.tumblr.com/&quot;&gt;Nation of Amanda&lt;/a&gt;) in PNG format with transparency:&lt;/p&gt;

&lt;figure&gt;&lt;div&gt;&lt;img src=&quot;/images/posts/party-never.png&quot; alt=&quot;‘Nap all day, sleep all night, party never’ by Nation of Amanda&quot;&gt;&lt;/div&gt;
&lt;figcaption&gt;Original black-and-white PNG image.&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;All you need to do is to run this:&lt;/p&gt;

&lt;figure&gt;&lt;pre&gt;&lt;code&gt;$ convert -alpha remove party-never.png pgm: \
| mkbitmap -f 32 -t 0.4 - -o - \
| potrace --svg -o party-never.svg&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It converts PNG file to PGM format, removes image transparency, outputs the result image to the standard input of &lt;code&gt;mkbitmap&lt;/code&gt; that transforms the input with highpass filtering and thresholding into a suitable for the &lt;code&gt;potrace&lt;/code&gt; program format, that finally generates SVG file. You can play around with highpass filtering (&lt;code&gt;-f&lt;/code&gt;) and thresholding (&lt;code&gt;-t&lt;/code&gt;) values until you have the final look that you want.&lt;/p&gt;

&lt;p&gt;As a result you might have now:&lt;/p&gt;

&lt;figure&gt;&lt;div&gt;&lt;img src=&quot;/images/posts/party-never.svg&quot; alt=&quot;‘Nap all day, sleep all night, party never’ by Nation of Amanda&quot;&gt;&lt;/div&gt;
&lt;figcaption&gt;Generated SVG image (zoom the page in).&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;That’s it.&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>What’s worth watching</title>
      <link href="http://eprev.org/2015/03/29/whats-worth-watching/"/>
      <updated>2015-03-29T00:00:00+01:00</updated>
      <id>http://eprev.org/2015/03/29/whats-worth-watching</id>
      <content type="html">&lt;ul&gt;
  &lt;li&gt;“&lt;a href=&quot;https://www.youtube.com/watch?v=X0VH78ye4yY&quot;&gt;Big Code: Developer Infrastructure at Facebook’s Scale&lt;/a&gt;” (2015): what is it like to be an engineer at Facebook; moving from Git towards Mercurial; Atom-based IDE for App, server-side and client-side development; continues integration at Facebook.&lt;/li&gt;
  &lt;li&gt;Zach Holman (GitHub) on “&lt;a href=&quot;http://www.bbc.co.uk/academy/technology/article/art20150206154333467&quot;&gt;Move fast and break nothing&lt;/a&gt;” (2014): how to ship software changes fast and not to break things.&lt;/li&gt;
&lt;/ul&gt;
</content>
    </entry>
  
    <entry>
      <title>What’s worth watching</title>
      <link href="http://eprev.org/2015/01/26/whats-worth-watching/"/>
      <updated>2015-01-26T00:00:00+01:00</updated>
      <id>http://eprev.org/2015/01/26/whats-worth-watching</id>
      <content type="html">&lt;ul&gt;
  &lt;li&gt;Drew Petersen (Spotify) on “&lt;a href=&quot;https://www.youtube.com/watch?v=uNVP5jDOVAY&quot;&gt;Developing Games Using Data not Trees&lt;/a&gt;” (2014): cons and pros of using data-oriented approach in game development.&lt;/li&gt;
  &lt;li&gt;Daniel Espeset (Etsy) on “&lt;a href=&quot;https://vimeo.com/109912254&quot;&gt;The role of Front-end Infrastructure at Etsy&lt;/a&gt;” (2014): continuos deployment and experimentation-driven development, instruments that help to delete old code constantly.&lt;/li&gt;
&lt;/ul&gt;
</content>
    </entry>
  
    <entry>
      <title>Open all modified files in editor</title>
      <link href="http://eprev.org/2014/12/10/open-all-modified-files/"/>
      <updated>2014-12-10T00:00:00+01:00</updated>
      <id>http://eprev.org/2014/12/10/open-all-modified-files</id>
      <content type="html">&lt;p&gt;Often I finish working day without committing changes to the repository. Thus, next morning
I need to open all the files I was working yesterday. And I found an efficient way to do this.&lt;/p&gt;

&lt;figure&gt;&lt;pre&gt;&lt;code&gt;$ vim -p $(git diff --name-only HEAD | sed &quot;s,$(git rev-parse --show-prefix),,&quot; | tr &quot;\n&quot; &quot; &quot;)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It opens Vim and loads all modified files in tabs. You could add this command as an alias to your &lt;code&gt;.bashrc&lt;/code&gt;,
but adding this to &lt;code&gt;.gitconfig&lt;/code&gt; seems like a better option. This is what you need to add to your &lt;code&gt;~/.gitconfig&lt;/code&gt;.&lt;/p&gt;

&lt;figure&gt;&lt;pre&gt;&lt;code&gt;[alias]
open = &quot;!vim -c \&quot;cd $GIT_PREFIX\&quot; -p $(git diff --name-only HEAD | tr '\\n' ' ')&quot;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To run this command you need to type &lt;code&gt;git open&lt;/code&gt; in the terminal. Since all commands prefixed with an exclamation
point are executed from the top-level directory of a repository, we need to change working directory in Vim to
the current one. And of course you can replace Vim by your favorite editor or event by &lt;code&gt;$EDITOR&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Besides, If you use sort of file watchers to perform certain operations when files change, then
you would find the following command quite helpful. It changes modification time of all modified files at once.&lt;/p&gt;

&lt;figure&gt;&lt;pre&gt;&lt;code&gt;[alias]
touch = &quot;!touch -c $(git diff --name-only HEAD | tr '\\n' ' ')&quot;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can find more handy aliases in &lt;a href=&quot;https://github.com/eprev/dotfiles/blob/master/gitconfig&quot;&gt;.dotfiles&lt;/a&gt; of mine.&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>What’s worth watching</title>
      <link href="http://eprev.org/2014/11/23/whats-worth-watching/"/>
      <updated>2014-11-23T00:00:00+01:00</updated>
      <id>http://eprev.org/2014/11/23/whats-worth-watching</id>
      <content type="html">&lt;ul&gt;
  &lt;li&gt;Bred Victor (MIT) on “&lt;a href=&quot;https://vimeo.com/67076984&quot;&gt;Media for Thinking the Unthinkable&lt;/a&gt;” (2013): incredible ideas that will probably change the way we present and understand things.&lt;/li&gt;
  &lt;li&gt;Douglas Crockford on “&lt;a href=&quot;http://www.youtube.com/watch?v=bo36MrBfTk4&quot;&gt;The Better Parts&lt;/a&gt;” (2014): you aren’t supposed to use every feature of the language to write error-free programs. Douglas is sharing his favorite parts of JavaScript and coming ES6 standard.&lt;/li&gt;
  &lt;li&gt;Facebook’s way to Flux and React in “&lt;a href=&quot;http://www.youtube.com/watch?v=nYkdrAPrdcw&quot;&gt;Rethinking Web App Development at Facebook&lt;/a&gt;” (2014).&lt;/li&gt;
  &lt;li&gt;John-David Dalton (Lo-Dash) on “&lt;a href=&quot;http://www.youtube.com/watch?v=NthmeLEhDDM&quot;&gt;Unorthodox Performance&lt;/a&gt;” (2014): interesting techniques to improve JavaScript performance.&lt;/li&gt;
  &lt;li&gt;Patrick Hamann (The Guardian) on “&lt;a href=&quot;http://www.youtube.com/watch?v=_0Fk85to6hA&quot;&gt;CSS and the Critical Path&lt;/a&gt;” (2014): dealing with performance bottlenecks in the browser from network to painting.&lt;/li&gt;
&lt;/ul&gt;
</content>
    </entry>
  
    <entry>
      <title>What’s worth watching</title>
      <link href="http://eprev.org/2014/02/27/whats-worth-watching/"/>
      <updated>2014-02-27T00:00:00+01:00</updated>
      <id>http://eprev.org/2014/02/27/whats-worth-watching</id>
      <content type="html">&lt;ul&gt;
  &lt;li&gt;Pete Hunt (Facebook) on “&lt;a href=&quot;http://2013.jsconf.eu/speakers/pete-hunt-react-rethinking-best-practices.html&quot;&gt;React: rethinking best practices&lt;/a&gt;” (2013).&lt;/li&gt;
  &lt;li&gt;Steven Wittens on “&lt;a href=&quot;http://www.youtube.com/watch?v=Zkx1aKv2z8o&quot;&gt;Making things with maths&lt;/a&gt;” (2013).&lt;/li&gt;
  &lt;li&gt;Interesting talk on &lt;a href=&quot;https://vimeo.com/channels/cssday/70171266&quot;&gt;border-radius&lt;/a&gt; (2013) by Lea Verou.&lt;/li&gt;
  &lt;li&gt;
&lt;a href=&quot;https://vimeo.com/39441590&quot;&gt;Inspiring talk&lt;/a&gt; (2012) by Aaron James Draplin.&lt;/li&gt;
  &lt;li&gt;Jason Santa Maria (A Book Apart) on “&lt;a href=&quot;https://vimeo.com/34178417&quot;&gt;Web typography&lt;/a&gt;” (2011).&lt;/li&gt;
&lt;/ul&gt;
</content>
    </entry>
  
    <entry>
      <title>What’s worth watching</title>
      <link href="http://eprev.org/2014/01/22/whats-worth-watching/"/>
      <updated>2014-01-22T00:00:00+01:00</updated>
      <id>http://eprev.org/2014/01/22/whats-worth-watching</id>
      <content type="html">&lt;ul&gt;
  &lt;li&gt;Tim Berglund (GitHub) on “&lt;a href=&quot;https://vimeo.com/49444883&quot;&gt;Advanced Git&lt;/a&gt;” (2012): low-level commands, interactive rebase, external diff &amp;amp; merge tools, reflog and reset.&lt;/li&gt;
  &lt;li&gt;Ilya Grigorik (Google) on “&lt;a href=&quot;http://www.youtube.com/watch?v=Il4swGfTOSM&quot;&gt;Breaking the 1000ms time to glass mobile barrier&lt;/a&gt;” (2013): how to build a mobile website that loads as quickly as possible.&lt;/li&gt;
  &lt;li&gt;Parikh (Facebook) on “&lt;a href=&quot;http://www.youtube.com/watch?v=oodS71YtkGU&quot;&gt;Building for a billion users&lt;/a&gt;” (2012).&lt;/li&gt;
  &lt;li&gt;Michael Starzinger (V8) on &lt;a href=&quot;http://2012.jsconf.eu/speaker/2012/08/31/the-footprint-of-performance.html&quot;&gt;the memory usage optimizations while keeping performance fast&lt;/a&gt; (2012).&lt;/li&gt;
  &lt;li&gt;Science paper begins with “Once upon a time…” — inspiring &lt;a href=&quot;http://www.ted.com/talks/beau_lotto_amy_o_toole_science_is_for_everyone_kids_included.html&quot;&gt;TED talk&lt;/a&gt; (2012) by Beau Lotto and Amy O’Toole.&lt;/li&gt;
&lt;/ul&gt;
</content>
    </entry>
  
    <entry>
      <title>Chrome tab tooltips</title>
      <link href="http://eprev.org/2014/01/19/chrome-tab-tooltips/"/>
      <updated>2014-01-19T00:00:00+01:00</updated>
      <id>http://eprev.org/2014/01/19/chrome-tab-tooltips</id>
      <content type="html">&lt;p&gt;Chrome adds a ‘volume’ icon to browser tabs that are playing audio in the background.&lt;/p&gt;

&lt;figure&gt;&lt;div&gt;&lt;img src=&quot;/images/posts/chrome-volume.png&quot; alt=&quot;‘Volume’ tab icon&quot;&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;And that’s not all. A ‘recording’ icon appears in place of the ‘volume’ icon when your webcam is being accessed.&lt;/p&gt;

&lt;figure&gt;&lt;div&gt;&lt;img src=&quot;/images/posts/chrome-recording.png&quot; alt=&quot;‘Recording’ tab icon&quot;&gt;&lt;/div&gt;&lt;/figure&gt;</content>
    </entry>
  
    <entry>
      <title>Why waiting is torture</title>
      <link href="http://eprev.org/2013/09/24/why-waiting-is-torture/"/>
      <updated>2013-09-24T00:00:00+02:00</updated>
      <id>http://eprev.org/2013/09/24/why-waiting-is-torture</id>
      <content type="html">&lt;p&gt;This is excerpts from “&lt;a href=&quot;http://www.nytimes.com/2012/08/19/opinion/sunday/why-waiting-in-line-is-torture.html&quot;&gt;Why Waiting Is Torture&lt;/a&gt;” by Alex Stone, The New York Times.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Instead of reducing wait times, Houston airport moved the arrival gates away
from the main terminal and routed bags to the outermost carousel. Passengers now
had to walk six times longer to get their bags. Number of complaints about the long waits
at baggage claim dropped to near zero.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Isn’t it brilliant?!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Occupied time (walking to baggage claim) feels shorter than unoccupied time (standing at the carousel).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is also why there are mirrors next to elevators and packs of gum along supermarket checkout aisles.&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>Mongo shell as an interactive JavaScript interpreter</title>
      <link href="http://eprev.org/2013/09/22/mongo-shell-as-an-interactive-javascript-interpreter/"/>
      <updated>2013-09-22T00:00:00+02:00</updated>
      <id>http://eprev.org/2013/09/22/mongo-shell-as-an-interactive-javascript-interpreter</id>
      <content type="html">&lt;p&gt;Do you have MongoDB installed? If you do then you have JavaScript interpreter. MongoDB has SpiderMonkey JavaScript engine. To start an interactive shell you have to type &lt;code&gt;mongo --nodb&lt;/code&gt; in the shell.&lt;/p&gt;

&lt;figure&gt;&lt;pre&gt;&lt;code&gt;$ mongo --nodb
MongoDB shell version: 2.2.0
&amp;gt; var user = {name: &quot;Anton Eprev&quot;, age: 27}
&amp;gt; user
{ &quot;name&quot; : &quot;Anton Eprev&quot;, &quot;age&quot; : 27 }
&amp;gt; print(user)
[object Object]
&amp;gt; printjson(user)
{ &quot;name&quot; : &quot;Anton Eprev&quot;, &quot;age&quot; : 27 }
&amp;gt; var numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
&amp;gt; print(numbers)
1,2,3,4,5,6,7,8,9
&amp;gt; printjson(numbers)
[ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And of course the shell allows you to use loops, user functions and etc.:&lt;/p&gt;

&lt;figure&gt;&lt;pre&gt;&lt;code&gt;&amp;gt; for (var i in user) { print(i, user[i]) }
name Anton Eprev
age 27
&amp;gt; function add(x){ return function(y){ return x + y } }
&amp;gt; add(3)(4)
7
&amp;gt; {
... for (var i = 0; i &amp;lt; 10; i++)
...     print(i)
... }
0
1
…
9&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can also use the &lt;code&gt;cat&lt;/code&gt; function to read the file’s contents.&lt;/p&gt;

&lt;figure&gt;&lt;pre&gt;&lt;code&gt;&amp;gt; var profile = cat('.profile')
&amp;gt; profile
export PATH=/opt/local/bin:/opt/local/sbin:$PATH
…&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You may even explore global scope by executing &lt;code&gt;printjson(this)&lt;/code&gt; and find out the following functions:&lt;/p&gt;

&lt;figure&gt;&lt;pre&gt;&lt;code&gt;pwd()
ls()
cd()
mkdir()
hostname()
sleep()
hex_md5()&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And finally, you can run a JavaScript file using MongoDB shell.&lt;/p&gt;

&lt;figure&gt;&lt;pre&gt;&lt;code&gt;$ cat hello.js
print(&quot;Hello World!&quot;);
$ mongo --nodb hello.js
MongoDB shell version: 2.2.0
Hello World!&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Happy coding =]&lt;/p&gt;
</content>
    </entry>
  
</feed>
