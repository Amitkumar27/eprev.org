#!/usr/bin/env node

const https = require('https');
const fs = require('fs');
const path = require('path');
const { URL } = require('url');

const options = {
  key: fs.readFileSync(path.join(__dirname, '../ssl/localhost.key')),
  cert: fs.readFileSync(path.join(__dirname, '/../ssl/localhost.crt')),
};

const mime = require('../lib/mime');

function end(res, code, msg) {
  res.writeHead(code, {
    'Content-Length': Buffer.byteLength(msg),
    'Content-Type': 'text/plain; charset=utf-8',
  });
  res.end(msg);
}

const config = require('../config');
const port = new URL(config.site.url).port;

https
  .createServer(options, (req, res) => {
    if (req.method !== 'GET') {
      return end(res, 405, 'Method Not Allowed');
    }
    const url = new URL(req.url, config.site.url);
    const pathname = path.join(config.static, url.pathname.endsWith('/') ? url.pathname + 'index.html' : url.pathname);
    fs.stat(pathname, (err, stat) => {
      if (err) {
        if (err.code === 'ENOENT') {
          end(res, 404, 'Not Found');
        } else {
          end(res, 500, err.toString());
        }
      } else {
        const ext = path.extname(pathname);
        res.writeHead(200, {
          'Content-Length': stat.size,
          'Content-Type': mime[ext] || 'application/octet-stream',
        });
        fs.createReadStream(pathname).pipe(res);
      }
    });
  })
  .listen(port);
