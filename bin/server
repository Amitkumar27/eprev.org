#!/usr/bin/env node

const https = require('https');
const fs = require('fs');
const path = require('path');
const { URL } = require('url');

const options = {
  key: fs.readFileSync(path.join(__dirname, '../ssl/localhost.key')),
  cert: fs.readFileSync(path.join(__dirname, '/../ssl/localhost.crt')),
};

const mime = require('../lib/mime');
const markdown = require('../lib/markdown');
const { render, renderFile } = require('../lib/template');

function end(res, code, msg) {
  res.writeHead(code, {
    'Content-Length': Buffer.byteLength(msg),
    'Content-Type': 'text/plain; charset=utf-8',
  });
  res.end(msg);
}

const config = require('../config');
const port = new URL(config.site.url).port;

const { objects, collections } = require('../lib/objects').get();

const routes = Object.keys(objects).reduce((routes, pathname) => {
  const ext = pathname.endsWith('.md') ? '.html' : path.extname(pathname);
  const object = objects[pathname];
  routes[objects[pathname].pathname] = { pathname, contentType: mime[ext], object };
  return routes;
}, {});

config.site.collections = collections;

https
  .createServer(options, (req, res) => {
    if (req.method !== 'GET') {
      return end(res, 405, 'Method Not Allowed');
    }
    const url = new URL(req.url, config.site.url);
    const route = routes[url.pathname];
    if (route) {
      const pathname = path.join(config.public, route.pathname);
      const { contentType, object } = route;
      if (object.content || object.template) {
        const context = {
          env: config.env,
          site: config.site,
          page: object,
        };
        let document;
        if (object.content) {
          document = render(object.layout || 'default', context);
        } else {
          document = renderFile(object.template, context);
        }
        res.writeHead(200, {
          'Content-Length': Buffer.byteLength(document),
          'Content-Type': 'text/html; charset=utf-8',
        });
        res.end(document);
      } else {
        res.writeHead(200, {
          'Content-Type': contentType || 'application/octet-stream',
        });
        fs.createReadStream(pathname).pipe(res);
      }
    } else {
      end(res, 404, 'Not Found');
    }
  })
  .listen(port);
