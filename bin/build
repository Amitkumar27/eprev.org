#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

const config = require('../config');

function removedir(dirname) {
  fs.readdirSync(dirname, { encoding: 'utf8' }).forEach(filename => {
    const pathname = path.join(dirname, filename);
    const stats = fs.statSync(pathname);
    if (stats.isDirectory()) {
      removedir(pathname);
      fs.rmdirSync(pathname);
    } else {
      fs.unlinkSync(pathname);
    }
  });
}

function copy(src, dest) {
  createdir(path.dirname(dest));
  fs.copyFileSync(src, dest);
}

function write(dest, content) {
  createdir(path.dirname(dest));
  fs.writeFileSync(dest, content, { encoding: 'utf8' });
}

function createdir(dirname) {
  dirname.split(path.sep).reduce((rel, dirname) => {
    const pathname = path.join(rel, dirname);
    if (!fs.existsSync(pathname)) {
      fs.mkdirSync(pathname);
    }
    return pathname;
  }, '/');
}

if (fs.existsSync(config.dest)) {
  removedir(config.dest);
}

const data = require('../lib/data');

const { render } = require('../lib/template');

config.site.collections = data.collections;

const generate = function(destination, template, page) {
  const context = {
    env: config.env,
    site: config.site,
    page,
  };
  const content = render(template, context);
  write(path.join(config.dest, destination), content);
};

Object.keys(data.documents).forEach(pathname => {
  const doc = data.documents[pathname];
  const destination = doc.pathname.endsWith('/')
    ? doc.pathname + 'index.html'
    : doc.pathname;
  if (doc.layout) {
    generate(destination, doc.layout, doc);
  } else {
    copy(path.join(config.src, pathname), path.join(config.dest, destination));
  }
});

generate(
  'index.html',
  'index',
  data.register({
    type: 'page',
    pathname: '/',
  }),
);

console.log(
  require('util').inspect(data.collections, { colors: true, depth: 4 }),
);
